#!/usr/bin/env node
import { Command } from "commander";
import http from "http";
import { promises as fs } from "fs";
import path from "path";

// --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Commander ---
const program = new Command();

program
  .requiredOption("-i, --input <path>", "—à–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É")
  .requiredOption("-h, --host <host>", "–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")
  .requiredOption("-p, --port <port>", "–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞");

// --- –ö–∞—Å—Ç–æ–º–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ ---
program.configureOutput({
  writeErr: (str) => {
    const msg = str.trim();

    if (msg.includes("required option '-i, --input <path>'")) {
      console.error("‚ùå Please, specify input file (-i –∞–±–æ --input)");
    } else if (msg.includes("required option '-h, --host <host>'")) {
      console.error("‚ùå Please, specify host (-h –∞–±–æ --host)");
    } else if (msg.includes("required option '-p, --port <port>'")) {
      console.error("‚ùå Please, specify port (-p –∞–±–æ --port)");
    } else {
      console.error(msg);
    }

    process.exit(1); // –ó–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ–≥—Ä–∞–º—É –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫
  },
});

program.parse(process.argv);
const options = program.opts();

// --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—É ---
try {
  await fs.access(options.input);
} catch {
  console.error("‚ùå Cannot find input file");
  process.exit(1);
}

// --- –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è JSON-—Ñ–∞–π–ª—É ---
async function readJsonFile(filePath) {
  try {
    const data = await fs.readFile(filePath, "utf-8");
    return JSON.parse(data);
  } catch (err) {
    console.error("‚ùå Error reading or parsing JSON:", err.message);
    process.exit(1);
  }
}

// --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ ---
const server = http.createServer(async (req, res) => {
  try {
    const data = await readJsonFile(options.input);

    res.writeHead(200, { "Content-Type": "application/json; charset=utf-8" });
    res.end(JSON.stringify(data, null, 2));
  } catch (err) {
    console.error("‚ùå Internal Server Error:", err.message);
    res.writeHead(500, { "Content-Type": "text/plain; charset=utf-8" });
    res.end("Internal Server Error");
  }
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
server.listen(options.port, options.host, () => {
  console.log(`‚úÖ Server running at http://${options.host}:${options.port}/`);
  console.log(`üìÇ Reading data from: ${options.input}`);
});
